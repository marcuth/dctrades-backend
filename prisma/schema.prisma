generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

enum DragonRarity {
    C
    R
    V
    E
    L
    M
    H
}

enum UserRole {
    ADMIN
    USER
}

enum Language {
    EN @map("en")
    ES @map("es")
    BR @map("br")
    PT @map("pt")
}

enum UserContactType {
    DISCORD
    TELEGRAM
    EMAIL
    WHATSAPP
}

model UserContact {
    id         String          @id @default(uuid())
    type       UserContactType
    attributes Json
    userId     String
    user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("contacts")
}

model User {
    id             String           @id @default(uuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    firebaseUid    String           @unique
    email          String           @unique
    username       String
    role           UserRole         @default(USER)
    profile        UserProfile?
    preferences    UserPreferences?
    orbTradeOffers OrbTradeOffer[]
    contacts       UserContact[]

    @@map("users")
}

model UserAvatar {
    id        String      @id @default(uuid())
    profile   UserProfile @relation(fields: [profileId], references: [id])
    profileId String      @unique
    url       String?

    @@map("user_avatars")
}

model UserProfile {
    id        String      @id @default(uuid())
    user      User        @relation(fields: [userId], references: [id])
    userId    String      @unique
    name      String
    avatar    UserAvatar?
    biography String?

    @@map("user_profiles")
}

model UserPreferences {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    language  Language @default(EN)
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique

    @@map("user_preferences")
}

model Dragon {
    id             Int             @id
    nameKey        String
    rarity         DragonRarity
    category       Int
    descriptionKey String?
    imageName      String
    offeredItems   OfferedItem[]
    tradeOffers    OrbTradeOffer[]

    @@map("dragons")
}

model OfferedItem {
    id           String        @id @default(uuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    quantity     Int
    dragon       Dragon        @relation(fields: [dragonId], references: [id], onDelete: Cascade)
    dragonId     Int
    tradeOffer   OrbTradeOffer @relation(fields: [tradeOfferId], references: [id], onDelete: Cascade)
    tradeOfferId String

    @@map("offered_items")
}

model OrbTradeOffer {
    id           String        @id @default(uuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    quantity     Int
    owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String
    dragon       Dragon        @relation(fields: [dragonId], references: [id], onDelete: Cascade)
    dragonId     Int
    offeredItems OfferedItem[]

    @@map("orb_trade_offers")
}
